# IMPORTANT: new packages must be added at the top of this file

# This is removed from default for now as it requires the joint_state branch on
# base/types
cmake_package 'control/joint_dispatcher'
remove_from_default 'control/joint_dispatcher'

cmake_package 'simulation/imumodel'
cmake_package 'planning/lama'
cmake_package 'planning/pddl_planner'
cmake_package 'drivers/actuator_dispatcher'
cmake_package 'data_processing/type_to_vector'
cmake_package 'drivers/ptu_directedperception'
import_package 'drivers/aria' do |pkg|

    def pkg.do_build
        run('build', Autobuild.tool(:make), "-j#{parallel_build_level}", "-C", srcdir)
    end
    
    def pkg.do_install
        include_dir = File.join(prefix, 'include', 'aria')
        lib_dir     = File.join(prefix, 'lib')
        FileUtils.rm_rf include_dir
        FileUtils.mkdir_p File.dirname(include_dir)
        FileUtils.mkdir_p lib_dir

        FileUtils.cp File.join(srcdir, 'lib','libAria.so'), File.join(lib_dir, 'libAria.so')
        FileUtils.cp_r File.join(srcdir, 'include'), include_dir
    end
    
    def pkg.do_pkgconfig
        pkgconfig_dir     = File.join(prefix, 'lib', "pkgconfig")
        FileUtils.mkdir_p pkgconfig_dir

        infile = File.readlines(File.join(srcdir, 'aria.pc.in'))
        
        pkgconfig = infile.map do |line|
            if !line.index("@CMAKE_INSTALL_PREFIX@").nil?
                line["@CMAKE_INSTALL_PREFIX@"] = prefix
            end
            
            if !line.index("@TARGET_NAME@").nil?
                line["@TARGET_NAME@"] = "aria"
            end
            
            if !line.index("@PROJECT_VERSION@").nil?
                line["@PROJECT_VERSION@"] = "2.7.5.2"
            end
            line
        end
        
        File.open(File.join(pkgconfig_dir, 'aria.pc'), 'w') do |outfile|
            outfile.write pkgconfig.join
        end
    end
    
    if pkg.respond_to?(:progress_start) # newer versions of autoproj
        pkg.post_install do
            pkg.progress_start "building %s" do
                pkg.do_build
            end
            pkg.progress_start "installing %s" do
                pkg.do_install
            end
            pkg.progress_start "generating pkgconfig file for %s" do
                pkg.do_pkgconfig
            end
        end
    else
        pkg.post_install do
            pkg.progress "building %s"
            pkg.do_build
            pkg.progress "installing %s"
            pkg.do_install
            pkg.progress "generating pkgconfig file for %s"
            pkg.do_pkgconfig
        end
    end

end

## 
# Remove this package. It's not working properly (has memory leak) and sometime
# does not build at all
#
# ruby_package 'gui/ffmpeg-ruby' do |pkg|
#     pkg.depends_on 'ffmpeg'
#     Autoproj.env_add_path "RUBYLIB", File.join(pkg.srcdir, "ext")
# end

#################################################################################"
#################################################################################"
## 
## Do not add anything below this line unless you know what you are doing
## New packages MUST be added at the top of the file
##
#################################################################################"
#################################################################################"

in_flavor 'master' do
    cmake_package 'control/kdl' do |pkg|
        pkg.depends_on 'base/types'
        pkg.with_doc 'docs'
        pkg.doc_dir = File.join('orocos_kdl', 'doc', 'api', 'html')
    end
    cmake_package 'drivers/stim300'
    cmake_package 'drivers/imar'
    cmake_package 'slam/polygonnet'
    cmake_package 'control/hysteresis_model'
    cmake_package 'slam/terrain_estimator'
    cmake_package 'gui/map2d'
    cmake_package 'slam/eslam'

    cmake_package 'planning/simple_path_planner'

    cmake_package "external/freenect" do |pkg|
        pkg.define "BUILD_AUDIO", "ON"
        pkg.define "BUILD_FAKENECT", "OFF"
        pkg.define "BUILD_EXAMPLES", "OFF"
        pkg.define "BUILD_C_SYNC", "OFF"
    end


    cmake_package 'gui/vizkit_3d_plugins'

    cmake_package 'drivers/alt_imagenex'
    cmake_package 'drivers/base_schilling'
    cmake_package 'drivers/ctd_seabird'
    cmake_package 'drivers/mbeam_imagenex'
    cmake_package 'drivers/pressure_paroscientific'
    cmake_package 'drivers/ucm_schilling'
    cmake_package 'drivers/act_schilling'
    cmake_package 'drivers/phins_ixsea'
    bundle_package 'bundles/rock_ugv_nav'
    remove_from_default 'bundles/rock_ugv_nav'
end

in_flavor 'master', 'next' do
    cmake_package 'slam/g2o' do |pkg|
        pkg.define("CMAKE_BUILD_TYPE", "RelWithDebInfo")
        pkg.define("CMAKE_RELWITHDEBINFO_POSTFIX", "")
    end

    # Override for gdal, but don't force so we don't have to build gdal
    # unecessarily
    Autoproj.add_osdeps_overrides 'gdal', :package => 'external/gdal'
    autotools_package 'external/gdal' do |pkg|
        pkg.depends_on 'swig'
        # GDAL doesn't support out of source builds
        pkg.builddir = "."
        pkg.configureflags = [
                "--includedir=#{pkg.prefix}/include/gdal",
                '--with-threads',
                '--with-ogr',
                '--with-geos',
                '--without-libtool',
                '--with-libz=internal',
                '--with-libtiff=internal',
                '--with-geotiff=internal',
                '--with-jpeg',
                '--with-ruby',
                '--without-gif',
                '--without-pg',
                '--without-grass',
                '--without-libgrass',
                '--without-cfitsio',
                '--without-pcraster',
                '--without-netcdf',
                '--without-png',
                '--without-gif',
                '--without-ogdi',
                '--without-fme',
                '--without-hdf4',
                '--without-hdf5',
                '--without-jasper',
                '--without-ecw',
                '--without-kakadu',
                '--without-mrsid',
                '--without-jp2mrsid',
                '--without-bsb',
                '--without-grib',
                '--without-mysql',
                '--without-ingres',
                '--without-xerces',
                '--without-expat',
                '--without-odbc',
                '--without-curl',
                '--without-sqlite3',
                '--without-dwgdirect',
                '--without-panorama',
                '--without-idb',
                '--without-sde',
                '--without-perl',
                '--without-php',
                '--without-python',
                '--without-ogpython',
                '--with-hide-internal-symbols']
    end
    remove_from_default "external/gdal"
end

in_flavor 'master', 'next', 'stable' do
    bundle_package 'bundles/rock'

    ##### External libraries not available as binary packages
    cmake_package 'external/yaml-cpp'
    cmake_package 'external/tinyxml' do |pkg|
        # tinyxml is patched to use Rock macros
        pkg.depends_on 'base/types'
    end
    
    ##### Control-related libraries
    cmake_package 'control/motor_controller'
    cmake_package 'control/trajectory_follower'
    cmake_package 'control/waypoint_navigation'

    ##### Base implementation for data acquisition
    cmake_package 'drivers/iodrivers_base' do |pkg|
        pkg.post_import do
            # CMake will fail if the test program is there 
            obsolete = File.join(pkg.builddir, "test")
            if File.exists?(obsolete) && !File.directory?(obsolete)
                FileUtils.rm_f obsolete
            end
        end
    end
    cmake_package 'drivers/aggregator' do |pkg|
        Autoproj.env_add_path 'OROGEN_PLUGIN_PATH', File.join(pkg.prefix, "share", "orogen", "plugins" )
    end
    cmake_package 'drivers/transformer' do |pkg|
        ## Keep this around as long as the refactored transformer is not in
        ## stable
        Autoproj.env_add_path 'OROGEN_PLUGIN_PATH', File.join(pkg.prefix, "share", "orogen", "plugins" )

        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir, "ruby", "lib")
    end

    ##### Device drivers
    cmake_package 'drivers/canbus'
    cmake_package 'drivers/mb500'
    cmake_package 'drivers/hokuyo'
    cmake_package 'drivers/xsens_imu'
    cmake_package 'drivers/dynamixel'
    cmake_package 'drivers/controldev'
    cmake_package 'drivers/parport'
    cmake_package 'drivers/camera_interface'
    cmake_package 'drivers/camera_prosilica'
    cmake_package 'drivers/camera_usb'
    cmake_package 'drivers/dvl_teledyne'
    cmake_package 'drivers/camera_firewire'
    cmake_package 'drivers/fog_kvh'
    cmake_package 'drivers/iCharger'
    cmake_package 'drivers/vicon'
    cmake_package 'drivers/qualisys'
    cmake_package 'drivers/sonar_tritech'
    cmake_package 'drivers/laserscanner_sick'
    cmake_package 'drivers/laser_filter'
    cmake_package 'drivers/camera_ids'
    if !has_ueye_api? # defined in init.rb
        Autoproj.manifest.add_exclusion "drivers/camera_ids", "the uEye Linux SDK needed for camera_ids is not installed!. Install it manually: http://www.ids-imaging.de/drivers.php"
    end

    ##### Image Processing
    cmake_package 'image_processing/stereo'
    cmake_package 'image_processing/jpeg_conversion' do |pkg|
        pkg.define "RUBY_EXECUTABLE", Autoproj.find_in_path(RbConfig::CONFIG['RUBY_INSTALL_NAME'])
    end
    cmake_package 'image_processing/frame_helper' do |pkg|
        if Autoproj.manifest.package_enabled?('rtt', false) # the toolchain is built, add it to the rtt_target
            pkg.define "OROCOS_TARGET", user_config('rtt_target')
        end
        pkg.define "RUBY_EXECUTABLE", Autoproj.find_in_path(RbConfig::CONFIG['RUBY_INSTALL_NAME'])
    end
    cmake_package 'image_processing/libelas' do |pkg|
        # Build system from libelas has been patched into a Rock/CMake-based one
        pkg.depends_on 'base/types'
    end

    ##### Planning
    cmake_package 'planning/nav_graph_search'
    cmake_package 'planning/corridor_planner'
    cmake_package 'planning/vfh_star'
    cmake_package 'planning/corridor_navigation'

    ##### Localisation and Mapping related packages
    autotools_package 'external/libply' do |pkg|
        pkg.using[:libtool] = true
        pkg.using[:autoheader] = true
    end
    cmake_package 'slam/envire' do |pkg| 
        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir, 'ruby')
    end
    cmake_package 'slam/pose_ekf'
    cmake_package 'slam/quater_ikf'
    cmake_package 'external/cminpack' do |pkg|
        pkg.define("CMAKE_BUILD_TYPE","Release")
    end
    cmake_package 'slam/flann' do |pkg|
        pkg.define("CMAKE_BUILD_TYPE","Release")
        pkg.define("BUILD_C_BINDINGS", "OFF")
        pkg.define("BUILD_MATLAB_BINDINGS", "OFF")
        pkg.define("BUILD_PYTHON_BINDINGS", "OFF")
    end
    Autoproj.add_osdeps_overrides 'flann', :package => 'slam/flann'
    remove_from_default 'slam/flann'
    cmake_package 'slam/pcl' do |pkg|
        pkg.define("CMAKE_BUILD_TYPE","Release")
        pkg.define("BUILD_OPENNI","OFF")
        env_add 'PKG_CONFIG_PATH', File.join(pkg.prefix, 'lib64', 'pkgconfig')

        # Seamlessly migrate from the SVN to the archive. We must delete the svn
        # directory !
        if pkg.importer.kind_of?(Autobuild::ArchiveImporter) && File.directory?(File.join(pkg.srcdir, ".svn"))
            Autoproj.configuration_option "UPDATE_PCL_FROM_SVN", "boolean",
                :doc => ["delete slam/pcl to update to the 1.6.0 release tarball ?",
                    "Rock was previously checking out the PCL SVN but just switched to",
                    "using the release tarball. Updating requires the deletion of the",
                    "currently checked out slam/pcl directory.",
                    "Should I do it ? This is required to continue building"],
                :default => 'yes'

            if Autoproj.user_config("UPDATE_PCL_FROM_SVN")
                Autoproj.warn "deleting PCL source directory to migrate from the SVN checkout to the release tarball"
                FileUtils.rm_rf pkg.srcdir
            else
                raise ConfigError, "user refused to delete slam/pcl, aborting the build"
            end
        end
    end
    remove_from_default 'slam/pcl'
    cmake_package 'slam/hogman' do |pkg|
        # HogMan has been patched to use Rock's build system
        pkg.depends_on 'base/types'
    end
    cmake_package 'slam/quater_ukf'
    cmake_package 'slam/odometry'
    cmake_package 'slam/graph_slam'


    ##### Graphical User Interface related packages 
    cmake_package 'gui/vizkit' do |pkg|
        if Autoproj.manifest.package_enabled?('rtt', false) # the toolchain is built, add it to the rtt_target
            pkg.define "OROCOS_TARGET", user_config('rtt_target')
        end
        Autoproj.env_add_path 'OSG_FILE_PATH', File.join(pkg.prefix, "share", "vizkit" )
        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir,"ruby/lib")
        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir,"build/lib")
        Autoproj.env_add_path 'PATH', File.join(pkg.srcdir,"bin")
        # Add our prefix to the VIZKIT_PLUGIN_RUBY_PATH. Relevant packages will have
        # to list the place where they install themselves
        Autoproj.env_add_path 'VIZKIT_PLUGIN_RUBY_PATH', File.join(pkg.prefix, 'lib')
        Autoproj.env_add_path 'VIZKIT_PLUGIN_RUBY_PATH', File.join(pkg.prefix, 'lib', 'vizkit')
    end
    cmake_package 'gui/rock_widget_collection' do |pkg|
        Autoproj.env_add_path 'QT_PLUGIN_PATH', File.join(pkg.prefix, "lib", "qt")
    end

    cmake_package 'external/opencv' do |pkg|
        pkg.define("CMAKE_BUILD_TYPE","Release")
        if not RUBY_PLATFORM.downcase.include?("arm")
           pkg.define("ENABLE_SSE3","ON")
           pkg.define("ENABLE_SSE41","OFF")
           pkg.define("ENABLE_SSE42","OFF")
           pkg.define("ENABLE_SSSE3","OFF")
        end
        pkg.define("BUILD_EXAMPLES","OFF")
        pkg.define("BUILD_NEW_PYTHON_SUPPORT","OFF")
        pkg.define("WITH_FFMPEG","OFF")
        pkg.define("BUILD_TESTS","OFF")
    end
    Autoproj.add_osdeps_overrides 'opencv', :package => 'external/opencv'
    remove_from_default 'external/opencv'

    #### Multiagent related packages
    cmake_package 'multiagent/fipa_acl'
end

# There is a problem with GCC and fipa_acl. Three of its files are taking
# something north of 3G to compile ... each
#
# Don't build unless really really needed
remove_from_default 'multiagent/fipa_acl'

autotools_package 'external/kdtree'
remove_from_default 'external/kdtree'
Autoproj.add_osdeps_overrides 'libkdtree', :package => 'external/kdtree'


only_in_flavor 'master','next' do
    setup_package 'external/yaml-cpp' do |pkg|
        pkg.define("BUILD_SHARED_LIBS","ON")
        update_archive(pkg, "http://yaml-cpp.googlecode.com/files/yaml-cpp-0.3.0.tar.gz", "0.3.0") do
            File.readlines(File.join(pkg.srcdir,"CMakeLists.txt")).grep(/YAML_CPP_VERSION_MINOR "3"/) == []
        end
    end
end

only_in_flavor 'master' do
    setup_package 'drivers/camera_prosilica' do |pkg|
        if pkg.respond_to?(:source_tree_excludes)
            pkg.source_tree_excludes << /Ping$/ << /ListCameras$/
        end
    end
end

create_metapackages
