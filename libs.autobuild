cmake_package 'drivers/sonar_tritech'
cmake_package 'drivers/laserscanner_sick'
cmake_package 'image_processing/jpeg_conversion'
cmake_package 'image_processing/stereo'
cmake_package 'slam/pose_ekf'
cmake_package 'slam/polygonnet'
cmake_package 'gui/map2d'
ruby_package 'gui/ffmpeg-ruby' do |pkg|
    pkg.depends_on 'ffmpeg'
    Autoproj.env_add_path "RUBYLIB", File.join(pkg.srcdir, "ext")
end

#################################################################################"
#################################################################################"
## 
## Do not add anything below this line unless you know what you are doing
## New packages MUST be added at the top of the file
##
#################################################################################"
#################################################################################"

in_flavor 'master', 'next' do
    cmake_package 'drivers/dvl_teledyne'
end

in_flavor 'stable', 'next', 'master' do
    ##### External libraries not available as binary packages
    cmake_package 'external/yaml-cpp'
    cmake_package 'external/tinyxml'

    ##### Control-related libraries
    cmake_package 'control/motor_controller'
    cmake_package 'control/trajectory_follower'
    cmake_package 'control/waypoint_navigation'

    ##### Base implementation for data acquisition
    cmake_package 'drivers/iodrivers_base' do |pkg|
        pkg.post_import do
            # CMake will fail if the test program is there 
            obsolete = File.join(pkg.builddir, "test")
            if File.exists?(obsolete) && !File.directory?(obsolete)
                FileUtils.rm_f obsolete
            end
        end
    end
    cmake_package 'drivers/aggregator' do |pkg|
        Autoproj.env_add_path 'OROGEN_PLUGIN_PATH', File.join(pkg.prefix, "share", "orogen", "plugins" )
    end
    cmake_package 'drivers/transformer' do |pkg|
        ## Keep this around as long as the refactored transformer is not in
        ## stable
        Autoproj.env_add_path 'OROGEN_PLUGIN_PATH', File.join(pkg.prefix, "share", "orogen", "plugins" )

        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir, "ruby", "lib")
    end

    ##### Device drivers
    cmake_package 'drivers/canbus'
    cmake_package 'drivers/mb500'
    cmake_package 'drivers/hokuyo'
    cmake_package 'drivers/xsens_imu'
    cmake_package 'drivers/dynamixel'
    cmake_package 'drivers/controldev'
    cmake_package 'drivers/parport'
    cmake_package 'drivers/camera_interface'
    cmake_package 'drivers/camera_prosilica'

    ##### Image Processing
    cmake_package 'image_processing/frame_helper'

    ##### Planning
    cmake_package 'planning/nav_graph_search'
    cmake_package 'planning/corridor_planner'

    ##### Localisation and Mapping related packages
    autotools_package 'external/libply' do |pkg|
        pkg.using[:libtool] = true
        pkg.using[:autoheader] = true
    end
    cmake_package 'slam/envire' do |pkg| 
        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir, 'ruby')
    end

    ##### Graphical User Interface related packages 
    cmake_package 'gui/vizkit' do |pkg|
        Autoproj.env_add_path 'OSG_FILE_PATH', File.join(pkg.prefix, "share", "vizkit" )
        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir,"ruby/lib")
        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir,"build/lib")
        Autoproj.env_add_path 'PATH', File.join(pkg.srcdir,"bin")
        # Add our prefix to the VIZKIT_PLUGIN_RUBY_PATH. Relevant packages will have
        # to list the place where they install themselves
        Autoproj.env_add_path 'VIZKIT_PLUGIN_RUBY_PATH', File.join(pkg.prefix, 'lib')
        Autoproj.env_add_path 'VIZKIT_PLUGIN_RUBY_PATH', File.join(pkg.prefix, 'lib', 'vizkit')
    end
    cmake_package 'gui/rock_widget_collection' do |pkg|
        Autoproj.env_add_path 'QT_PLUGIN_PATH', File.join(pkg.prefix, "lib", "qt")
    end

    ##### Graphical User Interface related packages 
    cmake_package 'external/opencv' do |pkg|
        pkg.define("CMAKE_BUILD_TYPE","Release")
        if not RUBY_PLATFORM.downcase.include?("arm")
	    pkg.define("ENABLE_SSE3","ON")
	    pkg.define("ENABLE_SSE41","OFF")
	    pkg.define("ENABLE_SSE42","OFF")
	    pkg.define("ENABLE_SSSE3","OFF")
        end
        pkg.define("BUILD_EXAMPLES","OFF")
        pkg.define("WITH_FFMPEG","OFF")
        pkg.define("BUILD_TESTS","OFF")
    end
    cmake_package 'image_processing/libelas'

    cmake_package 'external/cminpack' do |pkg|
        pkg.define("CMAKE_BUILD_TYPE","Release")
    end
    cmake_package 'slam/flann' do |pkg|
        pkg.define("CMAKE_BUILD_TYPE","Release")
        pkg.define("BUILD_C_BINDINGS", "OFF")
        pkg.define("BUILD_MATLAB_BINDINGS", "OFF")
        pkg.define("BUILD_PYTHON_BINDINGS", "OFF")
    end
    cmake_package 'slam/pcl' do |pkg|
        pkg.depends_on 'slam/flann'
        pkg.depends_on 'external/cminpack'
        pkg.depends_on 'qhull'
        pkg.define("CMAKE_BUILD_TYPE","Release")
        pkg.define("BUILD_OPENNI","OFF")
        env_add 'PKG_CONFIG_PATH', File.join(pkg.prefix, 'lib64', 'pkgconfig')
    end

    cmake_package 'planning/vfh_star'

    Autoproj.add_osdeps_overrides 'opencv', :package => 'external/opencv', :force => true

    cmake_package 'drivers/fog_kvh'
    cmake_package 'drivers/iCharger'
    cmake_package 'slam/hogman'
    cmake_package 'drivers/camera_firewire'
    cmake_package 'planning/corridor_navigation'

    #### Multiagent related packages
    cmake_package 'multiagent/fipa_acl'
end
