diff -rupN MTK_old/trunk/cpp/ukfom/lapack/cholesky.hpp MTK/trunk/cpp/ukfom/lapack/cholesky.hpp
--- ukfom/lapack/cholesky.hpp	2013-08-20 11:55:58.650899783 +0200
+++ ukfom/lapack/cholesky.hpp	2013-07-16 09:28:20.737587573 +0200
@@ -43,7 +43,7 @@ namespace ukfom {
 namespace lapack {
 
 // import most common Eigen types 
-USING_PART_OF_NAMESPACE_EIGEN
+using namespace Eigen;
 
 template<size_t M>
 class cholesky
diff -rupN MTK_old/trunk/cpp/ukfom/lapack/invert.hpp MTK/trunk/cpp/ukfom/lapack/invert.hpp
--- ukfom/lapack/invert.hpp	2013-08-20 11:55:58.650899783 +0200
+++ ukfom/lapack/invert.hpp	2013-07-15 19:19:52.365522240 +0200
@@ -43,7 +43,7 @@ namespace ukf {
 namespace lapack {
 
 // import most common Eigen types 
-USING_PART_OF_NAMESPACE_EIGEN
+using namespace Eigen;
 
 template<size_t P>
 Matrix<double, P, P> invert(const Matrix<double, P, P> &m)
diff -upN MTK_old/trunk/cpp/ukfom/mtkwrap.hpp MTK/trunk/cpp/ukfom/mtkwrap.hpp
--- ukfom/mtkwrap.hpp.old	2013-08-20 11:55:58.666899786 +0200
+++ ukfom/mtkwrap.hpp	2013-07-16 12:24:08.549601133 +0200
@@ -48,7 +48,7 @@ namespace ukfom {
 
 
 // import most common Eigen types 
-USING_PART_OF_NAMESPACE_EIGEN
+using namespace Eigen;
 
 
 /**
@@ -59,8 +59,8 @@ template<class M>
 struct mtkwrap : public M{
 	typedef mtkwrap<M> self;
 public:
-	typedef double scalar; // MTK only works with double
-	typedef scalar scalar_type;
+	//typedef double scalar; // MTK only works with double
+	typedef typename M::scalar scalar_type;
 
 	enum {
 		DOF = M::DOF
@@ -77,7 +77,7 @@ public:
 	 */
 	self& operator+=(const vectorized_type &delta_state)
 	{
-		assert(delta_state.stride() == DOF);
+		assert(delta_state.size() == DOF);
 		M::boxplus(delta_state.data());
 		return *this;
 	}
@@ -96,7 +96,7 @@ public:
 	const vectorized_type operator-(const self &other) const
 	{
 		vectorized_type result;
-		assert(result.stride()==DOF);
+		assert(result.rows()==DOF);
 		M::boxminus(result.data(), other);
 
 		return result;
diff -upN MTK_old/trunk/cpp/ukfom/ukf.hpp MTK/trunk/cpp/ukfom/ukf.hpp
--- ukfom/ukf.hpp.old	2013-08-20 11:55:58.666899786 +0200
+++ ukfom/ukf.hpp	2013-08-20 13:13:43.262905775 +0200
@@ -43,7 +43,11 @@
 #include <boost/bind.hpp>
 
 #include <Eigen/Core>
-#include <Eigen/LU> 
+#include <Eigen/LU>
+
+#if EIGEN_VERSION_AT_LEAST(3,0,0)
+    #include <Eigen/Eigenvalues>
+#endif
 
 #include <Eigen/QR>
 
@@ -54,7 +58,7 @@
 namespace ukfom {
 	
 // import most common Eigen types 
-USING_PART_OF_NAMESPACE_EIGEN
+using namespace Eigen;
 
 template <typename state>
 class ukf {
@@ -90,7 +94,7 @@ public:
 		state_vector X(2 * n + 1);
 		generate_sigma_points(mu_, sigma_, X);
 		
-		std::transform(X.begin(), X.end(), X.begin(), g);
+	        std::transform(X.begin(), X.end(), X.begin(), g);
 
 		mu_ = sigma_points_mean(X);
 
@@ -149,7 +153,7 @@ public:
 		const cross_cov covXZ = sigma_points_cross_cov<measurement_rows>(mu_, meanZ, X, Z);
 
 		measurement_cov S_inverse;
-		S.computeInverse(&S_inverse);
+		S_inverse = S.inverse();
 
 		const cross_cov K = covXZ * S_inverse;
 		
@@ -196,8 +200,9 @@ private:
 		
 		assert(L.isSPD());
 
+		
 		/*
-		std::cout << ">> L" << std::endl
+               std::cout << ">> L" << std::endl
 				  << L.getL() << std::endl
 				  << "<< L" << std::endl;
 		*/
